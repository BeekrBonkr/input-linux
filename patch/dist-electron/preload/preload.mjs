// From Input-Linux Patch

try {
    const { contextBridge, ipcRenderer } = require('electron');
  
    contextBridge.exposeInMainWorld('udevHelper', {
      runUdevSetup: () => ipcRenderer.send('run-udev-setup'),
    });
  } catch (err) {
    console.error('[udevHelper] preload script failed to expose udevHelper:', err);
  }

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

"use strict";var d=Object.defineProperty;var u=(e,r,a)=>r in e?d(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a;var l=(e,r,a)=>u(e,typeof r!="symbol"?r+"":r,a);const n=require("electron");var o=(e=>(e.appVersion="app-version",e.mainLog="main-log",e.openDevTools="open-dev-tools",e.enableMenuShortcuts="enable-menu-shortcuts",e.disableMenuShortcuts="disable-menu-shortcuts",e.openMacSettings="open-mac-settings",e))(o||{}),p=(e=>(e.searchDevices="searchDevices",e.searchForDeviceInBootloader="searchForDeviceInBootloader",e))(p||{}),s=(e=>(e.checkUpdates="check-updates",e.installUpdate="install-update",e.onUpdateDonwloaded="on-update-downloaded",e))(s||{});class i{}l(i,"commonChannelKey","commonChannel"),l(i,"fsChannelKey","fsChannel"),l(i,"devicesManagerChannelKey","devicesManagerChannel"),l(i,"connectedDeviceChannelKey","connectedDeviceChannel"),l(i,"updateChannelKey","updateChannel");var t=(e=>(e.isConnected="isConnected",e.connect="connect",e.disconnect="disconnect",e.getConnectedDevice="getConnectedDevice",e.sendLegacyRpcCall="sendLegacyRpcCall",e.sendJsonRpcCall="sendJsonRpcCall",e.onCloseEvent="onCloseEvent",e.onErrorEvent="onErrorEvent",e))(t||{}),c=(e=>(e.downloadFile="downloadFile",e.deleteFile="deleteFile",e.saveBackupFile="saveBackupFile",e.getBackupFiles="getBackupFiles",e.deleteBackupFiles="deleteBackupFiles",e.getWallpaperImage="getWallpaperImage",e.saveWallpaperImage="saveWallpaperImage",e.deleteWallpaperImage="deleteWallpaperImage",e.readFile="readFile",e))(c||{});const v={platform:process.platform,appVersion:()=>n.ipcRenderer.invoke(o.appVersion),onMainLog:e=>n.ipcRenderer.on(o.mainLog,(r,a)=>e(a)),openDevTools(){return n.ipcRenderer.invoke(o.openDevTools)},enableMenuShortcuts(){return n.ipcRenderer.invoke(o.enableMenuShortcuts)},disableMenuShortcuts(){return n.ipcRenderer.invoke(o.disableMenuShortcuts)},openMacSettings(){return n.ipcRenderer.invoke(o.openMacSettings)}},g={downloadFile(e){return n.ipcRenderer.invoke(c.downloadFile,e)},deleteFile(e){return n.ipcRenderer.invoke(c.deleteFile,e)},saveBackupFile(e,r){return n.ipcRenderer.invoke(c.saveBackupFile,e,r)},getBackupFiles(){return n.ipcRenderer.invoke(c.getBackupFiles)},deleteBackupFiles(){return n.ipcRenderer.invoke(c.deleteBackupFiles)},getWallpaperImage(){return n.ipcRenderer.invoke(c.getWallpaperImage)},saveWallpaperImage(e){return n.ipcRenderer.invoke(c.saveWallpaperImage,e)},deleteWallpaperImage(){return n.ipcRenderer.invoke(c.deleteWallpaperImage)},readBinaryFile(e){return n.ipcRenderer.invoke(c.readFile,e)}},k={async searchDevices(){return n.ipcRenderer.invoke(p.searchDevices)},async searchForDeviceInBootloader(){return n.ipcRenderer.invoke(p.searchForDeviceInBootloader)}},R={async isConnected(){return n.ipcRenderer.invoke(t.isConnected)},async getConnectedDevice(){return n.ipcRenderer.invoke(t.getConnectedDevice)},async connect(e){return n.ipcRenderer.invoke(t.connect,e)},disconnect(){return n.ipcRenderer.invoke(t.disconnect)},async sendLegacyRpcRequest(e,r){return n.ipcRenderer.invoke(t.sendLegacyRpcCall,e,r)},async sendJsonRpcRequest(e,r){return n.ipcRenderer.invoke(t.sendJsonRpcCall,e,r)},async onCloseEvent(e){n.ipcRenderer.on(t.onCloseEvent,(r,a)=>e(a))},async onErrorEvent(e){n.ipcRenderer.on(t.onErrorEvent,(r,a)=>e(a))}},y={async checkUpdates(){return n.ipcRenderer.invoke(s.checkUpdates)},async instalUpdates(){return n.ipcRenderer.invoke(s.installUpdate)},onUpdateDownloaded(e){n.ipcRenderer.on(s.onUpdateDonwloaded,(r,a)=>e(a))}};n.contextBridge.exposeInMainWorld(i.devicesManagerChannelKey,k);n.contextBridge.exposeInMainWorld(i.fsChannelKey,g);n.contextBridge.exposeInMainWorld(i.connectedDeviceChannelKey,R);n.contextBridge.exposeInMainWorld(i.commonChannelKey,v);n.contextBridge.exposeInMainWorld(i.updateChannelKey,y);

